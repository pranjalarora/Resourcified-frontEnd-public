{"version":3,"file":"index.esm.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/LinkPreview/Skeleton.tsx","../src/components/LinkPreview/LinkPreview.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react';\nimport LoadingSkeleton from 'react-loading-skeleton';\n\nimport './skeleton.scss';\n\ninterface SkeletonProps {\n  width?: string | number;\n  imageHeight?: string | number;\n  margin?: string | number;\n}\n\nconst Skeleton: React.FC<SkeletonProps> = ({ width = '100%', imageHeight = '30vh', margin }) => {\n  return (\n    <div className='skeleton-container' style={{ width, margin }}>\n      <LoadingSkeleton width={width} height={imageHeight} />\n      <div className='skeleton-lower-container'>\n        <LoadingSkeleton count={3} />\n      </div>\n    </div>\n  );\n};\n\nexport default Skeleton;\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport './linkPreview.scss';\nimport Skeleton from './Skeleton';\n\nconst proxyLink = 'https://rlp-proxy.herokuapp.com/v2?url=';\n\nexport interface LinkPreviewProps {\n  url: string;\n  className?: string;\n  width?: string | number;\n  height?: string | number;\n  descriptionLength?: number;\n  borderRadius?: string | number;\n  imageHeight?: string | number;\n  textAlign?: 'left' | 'right' | 'center';\n  margin?: string | number;\n  fallback?: JSX.Element[] | JSX.Element | null;\n  backgroundColor?: string;\n  primaryTextColor?: string;\n  secondaryTextColor?: string;\n  borderColor?: string;\n  showLoader?: boolean;\n  customLoader?: JSX.Element[] | JSX.Element | null;\n}\n\nexport interface APIResponse {\n  title: string | null;\n  description: string | null;\n  image: string | null;\n  siteName: string | null;\n  hostname: string | null;\n}\n\nexport const LinkPreview: React.FC<LinkPreviewProps> = ({\n  url,\n  className = '',\n  width,\n  height,\n  descriptionLength,\n  borderRadius,\n  imageHeight,\n  textAlign,\n  margin,\n  fallback = null,\n  backgroundColor = 'white',\n  primaryTextColor = 'black',\n  secondaryTextColor = 'rgb(100, 100, 100)',\n  borderColor = '#ccc',\n  showLoader = true,\n  customLoader = null,\n}) => {\n  const _isMounted = useRef(true);\n  const [metadata, setMetadata] = useState<APIResponse | null>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    _isMounted.current = true;\n    setLoading(true);\n    fetch(proxyLink + url)\n      .then((res) => res.json())\n      .then((res) => {\n        if (_isMounted.current) {\n          setMetadata((res.metadata as unknown) as APIResponse);\n          setLoading(false);\n        }\n      })\n      .catch((err: Error) => {\n        console.error(err);\n        console.error('No metadata could be found for the given URL.');\n        if (_isMounted.current) {\n          setMetadata(null);\n          setLoading(false);\n        }\n      });\n\n    return () => {\n      _isMounted.current = false;\n    };\n  }, [url]);\n\n  if (loading && showLoader) {\n    if (customLoader) {\n      return <>{customLoader}</>;\n    } else {\n      return <Skeleton width={width} imageHeight={imageHeight} margin={margin} />;\n    }\n  }\n\n  if (!metadata) {\n    return <>{fallback}</>;\n  }\n\n  const { image, description, title, siteName, hostname } = metadata;\n\n  const onClick = () => {\n    window.open(url, '_blank');\n  };\n\n  return (\n    <div\n      onClick={onClick}\n      className={`Container ${className}`}\n      style={{ width, height, borderRadius, textAlign, margin, backgroundColor, borderColor }}\n    >\n      <div\n        data-testid='image-container'\n        style={{\n          borderTopLeftRadius: borderRadius,\n          borderTopRightRadius: borderRadius,\n          backgroundImage: `url(${image})`,\n          height: imageHeight,\n        }}\n        className='Image'\n      ></div>\n      <div className='LowerContainer'>\n        <h3 className='Title' style={{ color: primaryTextColor }}>\n          {title}\n        </h3>\n        {description && (\n          <span className='Description Secondary' style={{ color: secondaryTextColor }}>\n            {descriptionLength\n              ? description.length > descriptionLength\n                ? description.slice(0, descriptionLength) + '...'\n                : description\n              : description}\n          </span>\n        )}\n        <div className='Secondary SiteDetails' style={{ color: secondaryTextColor }}>\n          {siteName && <span>{siteName} â€¢ </span>}\n          <span>{hostname}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Skeleton","_a","_b","width","_c","imageHeight","margin","React","className","LoadingSkeleton","height","count","LinkPreview","url","descriptionLength","borderRadius","textAlign","fallback","_d","backgroundColor","_e","primaryTextColor","_f","secondaryTextColor","_g","borderColor","_h","showLoader","_j","customLoader","_isMounted","useRef","_k","useState","metadata","setMetadata","_l","loading","setLoading","useEffect","current","fetch","then","res","json","catch","err","console","error","image","description","title","siteName","hostname","onClick","window","open","borderTopLeftRadius","borderTopRightRadius","backgroundImage","color","length","slice"],"mappings":"qGAAA,SAASA,EAAYC,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,qhCCZ9C,IAAMe,EAAoC,SAACC,OAAEC,UAAAC,aAAQ,SAAQC,gBAAAC,aAAc,SAAQC,WACjF,OACEC,uBAAKC,UAAU,qBAAqBjB,MAAO,CAAEY,QAAOG,WAClDC,gBAACE,GAAgBN,MAAOA,EAAOO,OAAQL,IACvCE,uBAAKC,UAAU,4BACbD,gBAACE,GAAgBE,MAAO,OCkBnBC,EAA0C,SAACX,OACtDY,QACAX,cAAAM,aAAY,KACZL,UACAO,WACAI,sBACAC,iBACAV,gBACAW,cACAV,WACAF,aAAAa,aAAW,OACXC,oBAAAC,aAAkB,UAClBC,qBAAAC,aAAmB,UACnBC,uBAAAC,aAAqB,uBACrBC,gBAAAC,aAAc,SACdC,eAAAC,gBACAC,iBAAAC,aAAe,OAETC,EAAaC,GAAO,GACpBC,EAA0BC,IAAzBC,OAAUC,OACXC,EAAwBH,GAAS,GAAhCI,OAASC,OA2BhB,GAzBAC,GAAU,WAoBR,OAnBAT,EAAWU,SAAU,EACrBF,GAAW,GACXG,MAtDc,0CAsDI5B,GACf6B,MAAK,SAACC,GAAQ,OAAAA,EAAIC,UAClBF,MAAK,SAACC,GACDb,EAAWU,UACbL,EAAaQ,EAAIT,UACjBI,GAAW,OAGdO,OAAM,SAACC,GACNC,QAAQC,MAAMF,GACdC,QAAQC,MAAM,iDACVlB,EAAWU,UACbL,EAAY,MACZG,GAAW,OAIV,WACLR,EAAWU,SAAU,KAEtB,CAAC3B,IAEAwB,GAAWV,EACb,OAAIE,EACKtB,gCAAGsB,GAEHtB,gBAACP,GAASG,MAAOA,EAAOE,YAAaA,EAAaC,OAAQA,IAIrE,IAAK4B,EACH,OAAO3B,gCAAGU,GAGJ,IAAAgC,EAAkDf,QAA3CgB,EAA2ChB,cAA9BiB,EAA8BjB,QAAvBkB,EAAuBlB,WAAbmB,EAAanB,WAM1D,OACE3B,uBACE+C,QANY,WACdC,OAAOC,KAAK3C,EAAK,WAMfL,UAAW,aAAaA,EACxBjB,MAAO,CAAEY,QAAOO,SAAQK,eAAcC,YAAWV,SAAQa,kBAAiBM,gBAE1ElB,qCACc,kBACZhB,MAAO,CACLkE,oBAAqB1C,EACrB2C,qBAAsB3C,EACtB4C,gBAAiB,OAAOV,MACxBvC,OAAQL,GAEVG,UAAU,UAEZD,uBAAKC,UAAU,kBACbD,sBAAIC,UAAU,QAAQjB,MAAO,CAAEqE,MAAOvC,IACnC8B,GAEFD,GACC3C,wBAAMC,UAAU,wBAAwBjB,MAAO,CAAEqE,MAAOrC,IACrDT,GACGoC,EAAYW,OAAS/C,EACnBoC,EAAYY,MAAM,EAAGhD,GAAqB,MAE5CoC,GAGR3C,uBAAKC,UAAU,wBAAwBjB,MAAO,CAAEqE,MAAOrC,IACpD6B,GAAY7C,4BAAO6C,SACpB7C,4BAAO8C"}