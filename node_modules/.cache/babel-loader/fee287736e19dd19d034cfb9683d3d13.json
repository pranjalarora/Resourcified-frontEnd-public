{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nvar styles = {\n  \"link-preview-section\": \"_3elLK\",\n  \"animated-background\": \"_Z-Tng\",\n  \"link-image-loader\": \"_13bre\",\n  \"img\": \"_1Igjx\",\n  \"placeHolderShimmer\": \"_yKlsy\",\n  \"link-description\": \"_3IjjD\",\n  \"domain\": \"_3Y4Nu\",\n  \"link-url\": \"_CZu1J\",\n  \"link-url-loader\": \"_2immM\",\n  \"link-data\": \"_2bWne\",\n  \"link-title\": \"_35AKc\",\n  \"link-data-loader\": \"_322CG\",\n  \"p1\": \"_3rFBW\",\n  \"p2\": \"_L7vLm\",\n  \"link-image\": \"_3EjBn\"\n};\n\nvar isValidUrlProp = function isValidUrlProp(props, propName, componentName) {\n  if (!props) {\n    return new Error(\"Required parameter URL was not passed.\");\n  }\n\n  if (!isValidUrl(props[propName])) {\n    return new Error(\"Invalid prop '\" + propName + \"' passed to '\" + componentName + \"'. Expected a valid url.\");\n  }\n};\n\nvar isValidUrl = function isValidUrl(url) {\n  var regex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/;\n  var validUrl = regex.test(url);\n  return validUrl;\n};\n\nfunction LinkPreview(props) {\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState({}),\n      preview = _useState2[0],\n      setPreviewData = _useState2[1];\n\n  var _useState3 = useState(false),\n      isUrlValid = _useState3[0],\n      setUrlValidation = _useState3[1];\n\n  var url = props.url,\n      width = props.width,\n      maxWidth = props.maxWidth,\n      marginTop = props.marginTop,\n      marginBottom = props.marginBottom,\n      marginRight = props.marginRight,\n      marginLeft = props.marginLeft,\n      onClick = props.onClick,\n      render = props.render;\n  var api = 'https://lpdg.herokuapp.com/parse/link';\n  var style = {\n    width: width,\n    maxWidth: maxWidth,\n    marginTop: marginTop,\n    marginBottom: marginBottom,\n    marginRight: marginRight,\n    marginLeft: marginLeft\n  };\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      try {\n        var fetch = window.fetch;\n\n        if (isValidUrl(url)) {\n          setUrlValidation(true);\n        } else {\n          return Promise.resolve({});\n        }\n\n        setLoading(true);\n        return Promise.resolve(fetch(api, {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: url\n          })\n        })).then(function (response) {\n          return Promise.resolve(response.json()).then(function (data) {\n            setPreviewData(data);\n            setLoading(false);\n          });\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  if (!isUrlValid) {\n    console.error('LinkPreview Error: You need to provide url in props to render the component');\n    return null;\n  }\n\n  if (render) {\n    return render({\n      loading: loading,\n      preview: preview\n    });\n  } else if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-preview-section'],\n      style: style\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-description']\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.domain\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: styles['animated-background']\n    }, \"facebook.com\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-data-loader']\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['animated-background']\n    }, \"Shashank Shekhar\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['animated-background']\n    }, \"This is some description\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-image-loader']\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.img\n    }))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-preview-section'],\n      style: style,\n      onClick: onClick\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-description']\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.domain\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: styles['link-url']\n    }, preview.domain)), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-data']\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-title']\n    }, preview.title), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-description']\n    }, preview.description))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['link-image']\n    }, preview.img && /*#__PURE__*/React.createElement(\"img\", {\n      src: preview.img,\n      alt: preview.description\n    }))));\n  }\n}\n\nLinkPreview.defaultProps = {\n  onClick: function onClick() {},\n  width: '90%',\n  maxWidth: '700px',\n  marginTop: '18px',\n  marginBottom: '18px',\n  marginRight: 'auto',\n  marginLeft: 'auto'\n};\nLinkPreview.propTyps = {\n  url: isValidUrlProp,\n  onClick: PropTypes.func,\n  render: PropTypes.func,\n  width: PropTypes.string,\n  maxWidth: PropTypes.string,\n  marginTop: PropTypes.string,\n  marginBottom: PropTypes.string,\n  marginRight: PropTypes.string,\n  marginLeft: PropTypes.string\n};\nexport default LinkPreview;","map":{"version":3,"sources":["../src/components/LinkPreview.js"],"names":["isValidUrlProp","isValidUrl","props","regex","validUrl","loading","setLoading","useState","preview","setPreviewData","isUrlValid","setUrlValidation","url","width","maxWidth","marginTop","marginBottom","marginRight","marginLeft","onClick","render","api","style","useEffect","fetchData","fetch","window","method","headers","Accept","body","response","console","styles","domain","img","description","LinkPreview","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './LinkPreview.css'\n\nconst isValidUrlProp = (props, propName, componentName) => {\n  if (!props) {\n    return new Error(`Required parameter URL was not passed.`)\n  }\n  if (!isValidUrl(props[propName])) {\n    return new Error(\n      `Invalid prop '${propName}' passed to '${componentName}'. Expected a valid url.`\n    )\n  }\n}\n\nconst isValidUrl = (url) => {\n  const regex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/\n  const validUrl = regex.test(url)\n  return validUrl\n}\n\nfunction LinkPreview(props) {\n  const [loading, setLoading] = useState(true)\n  const [preview, setPreviewData] = useState({})\n  const [isUrlValid, setUrlValidation] = useState(false)\n\n  const {\n    url,\n    width,\n    maxWidth,\n    marginTop,\n    marginBottom,\n    marginRight,\n    marginLeft,\n    onClick,\n    render\n  } = props\n\n  const api = 'https://lpdg.herokuapp.com/parse/link'\n\n  const style = {\n    width,\n    maxWidth,\n    marginTop,\n    marginBottom,\n    marginRight,\n    marginLeft\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      const fetch = window.fetch\n      if (isValidUrl(url)) {\n        setUrlValidation(true)\n      } else {\n        return {}\n      }\n      setLoading(true)\n      const response = await fetch(api, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ url })\n      })\n      const data = await response.json()\n      setPreviewData(data)\n      setLoading(false)\n    }\n    fetchData()\n  }, [url])\n\n  if (!isUrlValid) {\n    console.error(\n      'LinkPreview Error: You need to provide url in props to render the component'\n    )\n    return null\n  }\n\n  // If the user wants to use its own element structure with the fetched data\n  if (render) {\n    return render({\n      loading: loading,\n      preview: preview\n    })\n  } else if (loading) {\n    return (\n      <div>\n        <div className={styles['link-preview-section']} style={style}>\n          <div className={styles['link-description']}>\n            <div className={styles.domain}>\n              <span\n                className={\n                  (styles['link-url-loader'], styles['animated-background'])\n                }\n              >\n                facebook.com\n              </span>\n            </div>\n            <div className={styles['link-data-loader']}>\n              <div className={(styles.p1, styles['animated-background'])}>\n                Shashank Shekhar\n              </div>\n              <div className={(styles.p2, styles['animated-background'])}>\n                This is some description\n              </div>\n            </div>\n          </div>\n          <div className={styles['link-image-loader']}>\n            <div className={styles.img} />\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <div\n          className={styles['link-preview-section']}\n          style={style}\n          onClick={onClick}\n        >\n          <div className={styles['link-description']}>\n            <div className={styles.domain}>\n              <span className={styles['link-url']}>{preview.domain}</span>\n            </div>\n            <div className={styles['link-data']}>\n              <div className={styles['link-title']}>{preview.title}</div>\n              <div className={styles['link-description']}>\n                {preview.description}\n              </div>\n            </div>\n          </div>\n          <div className={styles['link-image']}>\n            {preview.img && <img src={preview.img} alt={preview.description} />}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nLinkPreview.defaultProps = {\n  onClick: () => {},\n  width: '90%',\n  maxWidth: '700px',\n  marginTop: '18px',\n  marginBottom: '18px',\n  marginRight: 'auto',\n  marginLeft: 'auto'\n}\n\nLinkPreview.propTyps = {\n  url: isValidUrlProp,\n  onClick: PropTypes.func,\n  render: PropTypes.func,\n  width: PropTypes.string,\n  maxWidth: PropTypes.string,\n  marginTop: PropTypes.string,\n  marginBottom: PropTypes.string,\n  marginRight: PropTypes.string,\n  marginLeft: PropTypes.string\n}\n\nexport default LinkPreview\n"]},"metadata":{},"sourceType":"module"}